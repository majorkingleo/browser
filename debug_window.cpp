#include "debug_window.h"
#include "fxhtml.h"
#include "html_object.h"
#include "string_utils.h"
#include "object_text.h"
#include "node.h"

const unsigned char i_folder[]={
  0x47,0x49,0x46,0x38,0x37,0x61,0x10,0x00,0x10,0x00,0xf2,0x00,0x00,0xb2,0xc0,0xdc,
  0x80,0x80,0x80,0xc0,0xc0,0xc0,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,
  0x00,0x00,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x03,
  0x3b,0x08,0xba,0xdc,0x1b,0x10,0x3a,0x16,0xc4,0xb0,0x22,0x4c,0x50,0xaf,0xcf,0x91,
  0xc4,0x15,0x64,0x69,0x92,0x01,0x31,0x7e,0xac,0x95,0x8e,0x58,0x7b,0xbd,0x41,0x21,
  0xc7,0x74,0x11,0xef,0xb3,0x5a,0xdf,0x9e,0x1c,0x6f,0x97,0x03,0xba,0x7c,0xa1,0x64,
  0x48,0x05,0x20,0x38,0x9f,0x50,0xe8,0x66,0x4a,0x75,0x24,0x00,0x00,0x3b
  };

const unsigned char i_info[]={
  0x47,0x49,0x46,0x38,0x39,0x61,0x10,0x00,0x12,0x00,0xe3,0x00,0x00,0x00,0x00,0x00,
  0xff,0xff,0x00,0xff,0xdc,0xa8,0xff,0xff,0xc0,0xff,0xa8,0x58,0xff,0xff,0xff,0xdc,
  0xdc,0xdc,0x80,0x80,0x80,0x58,0x58,0x58,0xa0,0xa0,0xa0,0x30,0x30,0x30,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x21,0xf9,0x04,
  0x01,0x0a,0x00,0x0f,0x00,0x2c,0x01,0x00,0x00,0x00,0x0f,0x00,0x12,0x00,0x00,0x04,
  0x50,0xf0,0x49,0x09,0x6a,0x9d,0x98,0x06,0xc1,0x03,0xc8,0xda,0x40,0x08,0x44,0xe0,
  0x65,0xc0,0x36,0x0e,0xa4,0x70,0x4e,0xe9,0x28,0xb0,0x44,0x79,0x69,0x6b,0x41,0xbf,
  0xe1,0x00,0x0c,0x1b,0xd3,0x07,0x93,0x12,0xa4,0x52,0x9e,0x21,0x51,0x28,0x54,0x12,
  0x6d,0x01,0x82,0x13,0xe5,0x39,0x4d,0x61,0x00,0xc3,0x0d,0x44,0x31,0x1c,0x10,0x5b,
  0x10,0x00,0x71,0x48,0x5c,0x89,0x0a,0x84,0x22,0x2c,0x66,0x8b,0x61,0xdc,0x78,0x26,
  0x02,0x00,0x3b
  };

const unsigned char i_content[]={
  0x47,0x49,0x46,0x38,0x39,0x61,0x10,0x00,0x10,0x00,0x84,0x00,0x00,0x00,0x00,0x00,
  0xff,0xff,0xff,0x80,0x80,0x80,0xfd,0xfb,0xf9,0xfa,0xf3,0xee,0xf7,0xec,0xe2,0xc5,
  0xc5,0xc5,0x24,0x58,0x34,0xfb,0xf5,0xf0,0xf8,0xee,0xe5,0xf5,0xe7,0xda,0xfb,0xf7,
  0xf3,0xf5,0xe8,0xdd,0xf2,0xe1,0xd2,0x0b,0x0b,0x0b,0x21,0x21,0x21,0xfc,0xf9,0xf6,
  0xf6,0xea,0xe0,0xf3,0xe3,0xd5,0xf0,0xdc,0xc9,0xf4,0xe5,0xd7,0xf1,0xdd,0xcc,0xee,
  0xd6,0xc1,0xfe,0xfd,0xfc,0xf2,0xdf,0xcf,0xef,0xd8,0xc4,0xec,0xd0,0xb8,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x21,0xf9,0x04,
  0x01,0x0a,0x00,0x1f,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x05,
  0x63,0xe0,0x27,0x8e,0x64,0xf9,0x01,0x40,0x89,0xaa,0x28,0x10,0xb8,0x30,0xfc,0xbe,
  0xa9,0x1b,0xdc,0x78,0xfe,0x8a,0xb7,0xe0,0xff,0xc0,0x9b,0xc8,0x25,0xd0,0x0d,0x08,
  0x05,0xc3,0xee,0xd3,0xc3,0x1d,0x0e,0x88,0x84,0x42,0x19,0x38,0x11,0x6f,0x87,0xc0,
  0xe2,0xc0,0x68,0x28,0x1d,0x80,0xc7,0xf5,0x06,0x39,0x44,0x24,0x13,0xe5,0x6a,0x7c,
  0x2c,0x50,0x2a,0x16,0x35,0x2f,0x50,0xbc,0x44,0x0f,0x98,0x8c,0x86,0x3a,0xa4,0x1b,
  0xfe,0x80,0x80,0x4b,0x3a,0x84,0x38,0x56,0x33,0x31,0x88,0x34,0x2b,0x24,0x8c,0x23,
  0x8e,0x26,0x91,0x21,0x00,0x3b
  };

const unsigned char i_node[]={
  0x47,0x49,0x46,0x38,0x39,0x61,0x10,0x00,0x10,0x00,0xc6,0x00,0x00,0x04,0x3e,0x6b,
  0x02,0x3e,0x6d,0x01,0x3e,0x6e,0x02,0x44,0x6d,0x04,0x40,0x6c,0x0d,0x45,0x71,0x08,
  0x43,0x71,0x27,0x5c,0x7e,0x2c,0x70,0x97,0x27,0x68,0x8e,0x1b,0x56,0x84,0x11,0x46,
  0x6c,0x0a,0x30,0x57,0x0c,0x43,0x6e,0x2a,0x61,0x81,0x3a,0x7f,0xa7,0x3b,0x80,0xa8,
  0xff,0xff,0xff,0x18,0x48,0x67,0x15,0x54,0x80,0x0a,0x43,0x73,0x00,0x29,0x4b,0x07,
  0x47,0x74,0x3c,0x7f,0xa5,0x47,0x8e,0xb2,0x49,0x91,0xb6,0x24,0x52,0x6f,0x1e,0x61,
  0x8a,0x0b,0x4f,0x7e,0x04,0x36,0x61,0x0c,0x2d,0x4f,0x04,0x3d,0x69,0x21,0x61,0x8e,
  0x42,0x88,0xb1,0x51,0x99,0xbe,0x56,0x9a,0xc1,0x4c,0x90,0xb3,0x3f,0x7b,0x9e,0x35,
  0x71,0x94,0x2d,0x6e,0x98,0x10,0x4d,0x7d,0x03,0x3f,0x72,0x00,0x36,0x63,0x10,0x2e,
  0x4e,0x19,0x64,0x94,0x47,0x8d,0xb6,0x56,0x9e,0xc3,0x29,0x57,0x74,0x2d,0x6e,0x94,
  0x1a,0x58,0x83,0x07,0x48,0x76,0x00,0x30,0x5a,0x08,0x2d,0x53,0x00,0x3c,0x6b,0x1b,
  0x5f,0x94,0x40,0x86,0xaf,0x26,0x52,0x6b,0x2b,0x6c,0x92,0x1d,0x5b,0x86,0x08,0x4a,
  0x79,0x00,0x36,0x5b,0x02,0x2c,0x53,0x00,0x36,0x5f,0x15,0x56,0x84,0x34,0x79,0xa5,
  0x22,0x4c,0x67,0x27,0x65,0x8c,0x1b,0x5e,0x88,0x06,0x48,0x77,0x00,0x33,0x5b,0x04,
  0x2a,0x52,0x02,0x37,0x60,0x0b,0x43,0x6a,0x23,0x68,0x98,0x3c,0x80,0xa7,0x1b,0x48,
  0x60,0x1f,0x5a,0x80,0x15,0x55,0x82,0x00,0x3f,0x6b,0x00,0x30,0x56,0x03,0x2b,0x4c,
  0x02,0x2a,0x53,0x0a,0x4b,0x79,0x21,0x66,0x92,0xfb,0xfb,0xfb,0x11,0x3e,0x60,0x05,
  0x3f,0x6c,0x00,0x2c,0x52,0x00,0x25,0x4b,0x00,0x2a,0x4e,0x08,0x4d,0x7d,0x0e,0x4f,
  0x81,0x11,0x51,0x7e,0x13,0x50,0x7a,0x02,0x39,0x63,0x00,0x32,0x56,0x00,0x26,0x47,
  0x00,0x38,0x63,0x00,0x3a,0x6b,0x00,0x29,0x4a,0x00,0x25,0x46,0x0e,0x2e,0x50,0x08,
  0x2d,0x54,0x00,0x2c,0x51,0x01,0x27,0x4f,0x02,0x29,0x4a,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x21,0xf9,0x04,
  0x01,0x0a,0x00,0x7f,0x00,0x2c,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x07,
  0x9d,0x80,0x7f,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x82,0x00,0x01,0x02,0x03,0x04,
  0x89,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x05,0x86,0x0d,0x0e,0x0f,0x10,0x11,
  0x11,0x12,0x13,0x14,0x15,0x99,0x84,0x16,0x17,0x18,0x19,0x9f,0x1a,0x1b,0x1c,0x1d,
  0x1e,0x84,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x83,
  0x01,0x2c,0x2d,0x2e,0x9f,0x11,0x2f,0x30,0x31,0x32,0x33,0x34,0x83,0x35,0x36,0x37,
  0xb5,0x9f,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x83,0x3e,0x3f,0x40,0xa9,0x9f,0x41,0x42,
  0x43,0x44,0x45,0x46,0x83,0x47,0x48,0x49,0x0f,0x4a,0x9f,0x4b,0x4c,0x4d,0x4e,0x4f,
  0x50,0x84,0x51,0x52,0x53,0x54,0xc4,0x55,0x56,0x57,0x58,0x85,0x05,0x59,0x02,0x5a,
  0x5b,0x5c,0xba,0x78,0xf9,0x02,0xa6,0x14,0x21,0x7e,0x61,0xc4,0xf8,0xb8,0x32,0x86,
  0x8c,0x41,0x43,0x65,0xcc,0x9c,0x41,0x93,0x26,0x91,0x45,0x41,0x81,0x00,0x00,0x3b
  };


FXDEFMAP( DebugWindow  ) DebugWindowMap[] = {
    FXMAPFUNC( SEL_COMMAND, DebugWindow::ID_RELOAD, DebugWindow::onReload ),
    FXMAPFUNC( SEL_COMMAND, DebugWindow::ID_TREE, DebugWindow::onItemSelected ),
    FXMAPFUNC( SEL_TIMEOUT, DebugWindow::ID_TIMEOUT, DebugWindow::onMarkupDone )
};

FXIMPLEMENT( DebugWindow, FXDialogBox, DebugWindowMap, ARRAYNUMBER( DebugWindowMap ) );

DebugWindow::DebugWindow(){}

DebugWindow::DebugWindow( FXApp *app, FXHTMLWindow *html )
    : FXDialogBox( app, "Debug Window", DECOR_ALL, 0, 0, 500 ),
      html( html )
{
    FXVerticalFrame *content = new FXVerticalFrame( this, LAYOUT_FILL_X | LAYOUT_FILL_Y );
    new FXButton( content, "reload", NULL, this, ID_RELOAD );
    new FXHorizontalSeparator( content );

    tree = new FXTreeList( content, 20, this, ID_TREE, TREELIST_SHOWS_LINES | LAYOUT_FILL_X | LAYOUT_FILL_Y );

    foldericon  = new FXGIFIcon(getApp(),i_folder);
    infoicon    = new FXGIFIcon(getApp(),i_info );
    contenticon = new FXGIFIcon( getApp(), i_content );
    nodeicon    = new FXGIFIcon( getApp(), i_node );

    timer = 0;
    marked_up = 0;
}

DebugWindow::~DebugWindow()
{
    delete foldericon;
    delete infoicon;
    delete contenticon;
    delete nodeicon;
}

void DebugWindow::create()
{
    FXDialogBox::create();

    foldericon->create();
    infoicon->create();
    contenticon->create();
    nodeicon->create();
}

long DebugWindow::onReload( FXObject *obj, FXSelector sel, void *ptr )
{
    root = html->getDOM();

    tree->clearItems();

    if( !root.valid() )
	return 1;

    build_tree( root, 0 );

    tree->expandTree( tree->getFirstItem() );

    return 1;
}

void DebugWindow::build_tree( Ref<HTMLObject> node, FXTreeItem *item )
{
    FXIcon *i = 0;

    if( node->getChildNum() )
	i = foldericon;

    FXTreeItem *i_new = tree->addItemLast( item, node->getClassName(), i, i, node.address() );

    // add some basic infos
    tree->addItemLast( i_new, 
		       FXString().format( "%dx%d min: %dx%d max_width: %d", 
					  node->getWidth(), node->getHeight(),
					  node->getMinWidth(), node->getMinHeight(),
					  node->getMaxWidth() ),
		       infoicon, infoicon
		       );

    FXString hints = layouthint2string( node );
    if( hints.length() )
	tree->addItemLast( i_new, hints, infoicon, infoicon );

    if( node->getLayoutHint( HTMLObject::LAYOUT_WIDTH_PERCENTAGE ) )
	tree->addItemLast( i_new, FXString().format( "width: %d%%", node->getPWidth() ), infoicon, infoicon );

    if( node->getLayoutHint( HTMLObject::LAYOUT_HEIGHT_PERCENTAGE ) )
	tree->addItemLast( i_new, FXString().format( "height: %d%%", node->getPHeight() ), infoicon, infoicon );

    for( int i = 0; i < node->getLocalStylesNum(); ++i )
    {
	FXString name, value;

	node->getLocalStyle( i, name, value );

	tree->addItemLast( i_new, FXString().format( "%s: %s", name.text(), value.text() ), infoicon, infoicon );
    }

    if( node->getObjectType() == ObjectText::TYPE_ID )
    {
	ObjectText* o = dynamic_cast<ObjectText*>( node.address() );

	tree->addItemLast( i_new, FXString().format( "text: %s", o->getText().text() ), contenticon, contenticon );
    }

    if( node->hasNode() )
    {
	Ref<Node> n = node->getNode();

	FXString t = '<' + n->getName();
	
	for( int i = 0; i < n->getAttributeNum(); ++i )
	{
	    Node::Attribute a = n->getAttribute( i );
	    t += ' ' + a.name + "=\"" + a.value + '\"';
	}

	if( n->getChildNum() )
	    t += '>';
	else
	    t += "/>";

	tree->addItemLast( i_new, t, nodeicon, nodeicon );
    }

    for( int i = 0; i < node->getChildNum(); ++i )
    {
	build_tree( node->getChild( i ), i_new );
	tree->expandTree( i_new );
    }
}

long DebugWindow::onItemSelected( FXObject *obj, FXSelector sel, void *ptr )
{
    FXTreeItem *item = (FXTreeItem*)ptr;

    if( !item )
	return 1;

    HTMLObject *o = (HTMLObject*)item->getData();

    if( !o )
	return 1;

    if( timer )
    {
	getApp()->removeTimeout( timer );
	timer = 0;

	if( marked_up )
	    marked_up->clearMarkup();

	marked_up = 0;
    } 

    timer = getApp()->addTimeout( 3000, this, ID_TIMEOUT );

    marked_up = o;
    o->doMarkup();
    html->doUpdate();    

    return 1;
}

long DebugWindow::onMarkupDone( FXObject *obj, FXSelector sel, void *ptr )
{
    marked_up->clearMarkup();
    html->doUpdate();
    timer = 0;
    marked_up = 0;
    return 1;
}
